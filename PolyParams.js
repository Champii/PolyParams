// Generated by LiveScript 1.3.1
(function(){
  var slice$ = [].slice, toString$ = {}.toString;
  import$(global, require('prelude-ls'));
  module.exports = function(){
    var i$, types, f;
    types = 0 < (i$ = arguments.length - 1) ? slice$.call(arguments, 0, i$) : (i$ = 0, []), f = arguments[i$];
    types = map(function(it){
      switch (false) {
      case !isType('String', it):
        return {
          type: it
        };
      case !isType('Object', it):
        return import$({
          type: first(keys(it))
        }, first(values(it)));
      }
    })(
    types);
    return function(){
      var args, defaults, resArgs;
      args = slice$.call(arguments);
      defaults = [];
      resArgs = map(function(it){
        var argIdx, ref$;
        argIdx = findIndex(function(arg){
          return toString$.call(arg).slice(8, -1) === it.type;
        })(
        args);
        switch (false) {
        case argIdx == null:
          return ref$ = args[argIdx], delete args[argIdx], ref$;
        case !(argIdx == null && it.optional != null):
          return null;
        case !(argIdx == null && it['default'] != null):
          return it['default'];
        default:
          throw new Error("No arguments of type: " + it.type);
        }
      })(
      types);
      return f.apply(null, resArgs);
    };
  };
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
